"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigFileFactory = void 0;
var ajv_1 = require("ajv");
var ConfigFileFactory = /** @class */ (function () {
    function ConfigFileFactory() {
    }
    ConfigFileFactory.load = function (data_folder) {
        var fs = require('fs');
        var schemaFilename = "".concat(__dirname, "/csv2ttl_config.schema.json");
        var configFilename = "".concat(data_folder, "/csv2ttl_config.json");
        var schema;
        var configData = null;
        try {
            schema = fs.readFileSync(schemaFilename, 'utf8');
        }
        catch (err) {
            console.log("\u001B[0;31mERROR\u001B[0m reading schema '".concat(schemaFilename, "':"));
            console.error(err);
            process.exitCode = 1;
            schema = null;
        }
        if (schema) {
            var compiledSchema = void 0;
            var ajv = new ajv_1.default(); // options can be passed, e.g. {allErrors: true}
            try {
                compiledSchema = ajv.compile(JSON.parse(schema));
            }
            catch (err) {
                console.log("\u001B[0;31mERROR\u001B[0m parsing schema '".concat(schemaFilename, "':"));
                console.error(err);
                process.exitCode = 1;
                compiledSchema = null;
            }
            if (compiledSchema) {
                if (fs.existsSync(configFilename)) {
                    try {
                        var config_data_raw = fs.readFileSync(configFilename, 'utf8');
                        configData = JSON.parse(config_data_raw);
                    }
                    catch (err) {
                        console.log("\u001B[0;31mERROR\u001B[0m reading and parsing config file '".concat(configFilename, "':"));
                        console.error(err);
                        configData = null;
                        process.exitCode = 1;
                    }
                    if (configData) {
                        try {
                            var valid = compiledSchema ? compiledSchema(configData) : null;
                            if (valid) {
                                console.log("use config file '".concat(configFilename, "'"));
                            }
                            else {
                                console.log("\u001B[0;31mERROR\u001B[0m invalid config file '".concat(configFilename, "':"));
                                console.error(compiledSchema ? compiledSchema.errors : 'error unknown');
                                configData = null;
                                process.exitCode = 1;
                            }
                        }
                        catch (err) {
                            console.log("\u001B[0;31mERROR\u001B[0m invalid config file '".concat(configFilename, "':"));
                            console.error(err);
                            configData = null;
                            process.exitCode = 1;
                        }
                    }
                }
                else {
                    console.log("\u001B[0;31mERROR\u001B[0m config file '".concat(configFilename, "' not found"));
                    process.exitCode = 1;
                }
            }
        }
        return configData;
    };
    return ConfigFileFactory;
}());
exports.ConfigFileFactory = ConfigFileFactory;
//# sourceMappingURL=config-file.factory.js.map